.TH "opus_custom.h" 3 "25 Jun 2013" "Version 1.0.2" "Opus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
opus_custom.h \- 
.PP
Opus-Custom reference implementation API.  

.SH SYNOPSIS
.br
.PP
\fC#include 'opus_defines.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBOPUS_CUSTOM_EXPORT\fP"
.br
.ti -1c
.RI "#define \fBOPUS_CUSTOM_EXPORT_STATIC\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBOpusCustomEncoder\fP \fBOpusCustomEncoder\fP"
.br
.RI "\fIContains the state of an encoder. \fP"
.ti -1c
.RI "typedef struct \fBOpusCustomDecoder\fP \fBOpusCustomDecoder\fP"
.br
.RI "\fIState of the decoder. \fP"
.ti -1c
.RI "typedef struct \fBOpusCustomMode\fP \fBOpusCustomMode\fP"
.br
.RI "\fIThe mode contains all the information necessary to create an encoder. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBOpusCustomMode\fP * \fBopus_custom_mode_create\fP (\fBopus_int32\fP Fs, int frame_size, int *error)"
.br
.RI "\fICreates a new mode struct. \fP"
.ti -1c
.RI "void \fBopus_custom_mode_destroy\fP (\fBOpusCustomMode\fP *mode)"
.br
.RI "\fIDestroys a mode struct. \fP"
.ti -1c
.RI "int \fBopus_custom_encoder_get_size\fP (const \fBOpusCustomMode\fP *mode, int channels)"
.br
.RI "\fIGets the size of an OpusCustomEncoder structure. \fP"
.ti -1c
.RI "\fBOpusCustomEncoder\fP * \fBopus_custom_encoder_create\fP (const \fBOpusCustomMode\fP *mode, int channels, int *error)"
.br
.RI "\fICreates a new encoder state. \fP"
.ti -1c
.RI "int \fBopus_custom_encoder_init\fP (\fBOpusCustomEncoder\fP *st, const \fBOpusCustomMode\fP *mode, int channels)"
.br
.RI "\fIInitializes a previously allocated encoder state The memory pointed to by st must be the size returned by opus_custom_encoder_get_size. \fP"
.ti -1c
.RI "void \fBopus_custom_encoder_destroy\fP (\fBOpusCustomEncoder\fP *st)"
.br
.RI "\fIDestroys a an encoder state. \fP"
.ti -1c
.RI "int \fBopus_custom_encode_float\fP (\fBOpusCustomEncoder\fP *st, const float *pcm, int frame_size, unsigned char *compressed, int maxCompressedBytes)"
.br
.RI "\fIEncodes a frame of audio. \fP"
.ti -1c
.RI "int \fBopus_custom_encode\fP (\fBOpusCustomEncoder\fP *st, const \fBopus_int16\fP *pcm, int frame_size, unsigned char *compressed, int maxCompressedBytes)"
.br
.RI "\fIEncodes a frame of audio. \fP"
.ti -1c
.RI "int \fBopus_custom_encoder_ctl\fP (\fBOpusCustomEncoder\fP *OPUS_RESTRICT st, int request,...)"
.br
.RI "\fIPerform a CTL function on an Opus custom encoder. \fP"
.ti -1c
.RI "int \fBopus_custom_decoder_get_size\fP (const \fBOpusCustomMode\fP *mode, int channels)"
.br
.RI "\fIGets the size of an OpusCustomDecoder structure. \fP"
.ti -1c
.RI "\fBOpusCustomDecoder\fP * \fBopus_custom_decoder_create\fP (const \fBOpusCustomMode\fP *mode, int channels, int *error)"
.br
.RI "\fICreates a new decoder state. \fP"
.ti -1c
.RI "int \fBopus_custom_decoder_init\fP (\fBOpusCustomDecoder\fP *st, const \fBOpusCustomMode\fP *mode, int channels)"
.br
.RI "\fIInitializes a previously allocated decoder state The memory pointed to by st must be the size returned by opus_custom_decoder_get_size. \fP"
.ti -1c
.RI "void \fBopus_custom_decoder_destroy\fP (\fBOpusCustomDecoder\fP *st)"
.br
.RI "\fIDestroys a an decoder state. \fP"
.ti -1c
.RI "int \fBopus_custom_decode_float\fP (\fBOpusCustomDecoder\fP *st, const unsigned char *data, int len, float *pcm, int frame_size)"
.br
.RI "\fIDecode an opus custom frame with floating point output. \fP"
.ti -1c
.RI "int \fBopus_custom_decode\fP (\fBOpusCustomDecoder\fP *st, const unsigned char *data, int len, \fBopus_int16\fP *pcm, int frame_size)"
.br
.RI "\fIDecode an opus custom frame. \fP"
.ti -1c
.RI "int \fBopus_custom_decoder_ctl\fP (\fBOpusCustomDecoder\fP *OPUS_RESTRICT st, int request,...)"
.br
.RI "\fIPerform a CTL function on an Opus custom decoder. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Opus-Custom reference implementation API. 


.SH "Define Documentation"
.PP 
.SS "#define OPUS_CUSTOM_EXPORT"
.SS "#define OPUS_CUSTOM_EXPORT_STATIC"
.SH "Author"
.PP 
Generated automatically by Doxygen for Opus from the source code.
