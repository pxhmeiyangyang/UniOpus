.TH "opus_multistream.h" 3 "25 Jun 2013" "Version 1.0.2" "Opus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
opus_multistream.h \- 
.PP
Opus reference implementation multistream API.  

.SH SYNOPSIS
.br
.PP
\fC#include 'opus.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBOPUS_MULTISTREAM_GET_ENCODER_STATE\fP(x, y)"
.br
.RI "\fIGets the encoder state for an individual stream of a multistream encoder. \fP"
.ti -1c
.RI "#define \fBOPUS_MULTISTREAM_GET_DECODER_STATE\fP(x, y)"
.br
.RI "\fIGets the decoder state for an individual stream of a multistream decoder. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBOpusMSEncoder\fP \fBOpusMSEncoder\fP"
.br
.RI "\fIOpus multistream encoder state. \fP"
.ti -1c
.RI "typedef struct \fBOpusMSDecoder\fP \fBOpusMSDecoder\fP"
.br
.RI "\fIOpus multistream decoder state. \fP"
.in -1c
.SS "Functions"

.PP
.RI "\fBMultistream encoder functions\fP"
.br
 
.PP
.in +1c
.in +1c
.ti -1c
.RI "\fBopus_int32\fP \fBopus_multistream_encoder_get_size\fP (int streams, int coupled_streams)"
.br
.RI "\fIGets the size of an OpusMSEncoder structure. \fP"
.ti -1c
.RI "\fBOpusMSEncoder\fP * \fBopus_multistream_encoder_create\fP (\fBopus_int32\fP Fs, int channels, int streams, int coupled_streams, const unsigned char *mapping, int application, int *error)"
.br
.RI "\fIAllocates and initializes a multistream encoder state. \fP"
.ti -1c
.RI "int \fBopus_multistream_encoder_init\fP (\fBOpusMSEncoder\fP *st, \fBopus_int32\fP Fs, int channels, int streams, int coupled_streams, const unsigned char *mapping, int application)"
.br
.RI "\fIInitialize a previously allocated multistream encoder state. \fP"
.ti -1c
.RI "int \fBopus_multistream_encode\fP (\fBOpusMSEncoder\fP *st, const \fBopus_int16\fP *pcm, int frame_size, unsigned char *data, \fBopus_int32\fP max_data_bytes)"
.br
.RI "\fIEncodes a multistream Opus frame. \fP"
.ti -1c
.RI "int \fBopus_multistream_encode_float\fP (\fBOpusMSEncoder\fP *st, const float *pcm, int frame_size, unsigned char *data, \fBopus_int32\fP max_data_bytes)"
.br
.RI "\fIEncodes a multistream Opus frame from floating point input. \fP"
.ti -1c
.RI "void \fBopus_multistream_encoder_destroy\fP (\fBOpusMSEncoder\fP *st)"
.br
.RI "\fIFrees an \fCOpusMSEncoder\fP allocated by \fBopus_multistream_encoder_create()\fP. \fP"
.ti -1c
.RI "int \fBopus_multistream_encoder_ctl\fP (\fBOpusMSEncoder\fP *st, int request,...)"
.br
.RI "\fIPerform a CTL function on a multistream Opus encoder. \fP"
.in -1c
.in -1c
.PP
.RI "\fBMultistream decoder functions\fP"
.br
 
.PP
.in +1c
.in +1c
.ti -1c
.RI "\fBopus_int32\fP \fBopus_multistream_decoder_get_size\fP (int streams, int coupled_streams)"
.br
.RI "\fIGets the size of an \fCOpusMSDecoder\fP structure. \fP"
.ti -1c
.RI "\fBOpusMSDecoder\fP * \fBopus_multistream_decoder_create\fP (\fBopus_int32\fP Fs, int channels, int streams, int coupled_streams, const unsigned char *mapping, int *error)"
.br
.RI "\fIAllocates and initializes a multistream decoder state. \fP"
.ti -1c
.RI "int \fBopus_multistream_decoder_init\fP (\fBOpusMSDecoder\fP *st, \fBopus_int32\fP Fs, int channels, int streams, int coupled_streams, const unsigned char *mapping)"
.br
.RI "\fIIntialize a previously allocated decoder state object. \fP"
.ti -1c
.RI "int \fBopus_multistream_decode\fP (\fBOpusMSDecoder\fP *st, const unsigned char *data, \fBopus_int32\fP len, \fBopus_int16\fP *pcm, int frame_size, int decode_fec)"
.br
.RI "\fIDecode a multistream Opus packet. \fP"
.ti -1c
.RI "int \fBopus_multistream_decode_float\fP (\fBOpusMSDecoder\fP *st, const unsigned char *data, \fBopus_int32\fP len, float *pcm, int frame_size, int decode_fec)"
.br
.RI "\fIDecode a multistream Opus packet with floating point output. \fP"
.ti -1c
.RI "int \fBopus_multistream_decoder_ctl\fP (\fBOpusMSDecoder\fP *st, int request,...)"
.br
.RI "\fIPerform a CTL function on a multistream Opus decoder. \fP"
.ti -1c
.RI "void \fBopus_multistream_decoder_destroy\fP (\fBOpusMSDecoder\fP *st)"
.br
.RI "\fIFrees an \fCOpusMSDecoder\fP allocated by \fBopus_multistream_decoder_create()\fP. \fP"
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
Opus reference implementation multistream API. 


.SH "Author"
.PP 
Generated automatically by Doxygen for Opus from the source code.
